// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  role          Role       @default(USER)
  accounts      Account[]
  posts         Location[]
  comments      Comment[]
}

model Location {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String    @unique
  description String
  address     String
  street      String
  photos      String[]
  authorId    String    @db.ObjectId
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categoryId  String    @db.ObjectId
  category    Category  @relation(fields: [categoryId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  reviews     Comment[]
}

model Category {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String     @unique
  description String?
  locations   Location[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  comment   String
  createdAt DateTime @default(now())

  reviewer    User?   @relation(fields: [reviewerIDs], references: [id], onDelete: Cascade)
  reviewerIDs String? @db.ObjectId

  location    Location? @relation(fields: [locationIDs], references: [id], onDelete: Cascade)
  locationIDs String?   @db.ObjectId
}

enum Role {
  USER
  ADMIN
}
